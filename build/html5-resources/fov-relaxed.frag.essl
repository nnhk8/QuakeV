#version 100
precision mediump float;
precision mediump int;

uniform mediump sampler2D gbufferD;
uniform mediump sampler2D tex;

varying vec2 texCoord;

float linearize(float depth, vec2 cameraProj)
{
    return cameraProj.y / (depth - cameraProj.x);
}

vec2 rand2(vec2 coord)
{
    float noiseX = (((fract(1.0 - (coord.x * 550.0)) * 0.25) + (fract(coord.y * 250.0) * 0.75)) * 2.0) - 1.0;
    float noiseY = (((fract(1.0 - (coord.x * 550.0)) * 0.75) + (fract(coord.y * 250.0) * 0.25)) * 2.0) - 1.0;
    return vec2(noiseX, noiseY);
}

vec3 color(vec2 coords, float blur, mediump sampler2D tex_1, vec2 texStep)
{
    vec3 col = vec3(0.0);
    col.x = texture2D(tex_1, coords + (((vec2(0.0, 1.0) * texStep) * 0.699999988079071044921875) * blur)).x;
    col.y = texture2D(tex_1, coords + (((vec2(-0.865999996662139892578125, -0.5) * texStep) * 0.699999988079071044921875) * blur)).y;
    col.z = texture2D(tex_1, coords + (((vec2(0.865999996662139892578125, -0.5) * texStep) * 0.699999988079071044921875) * blur)).z;
    float lum = dot(col, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
    float thresh = max((lum - 0.5) * 2.0, 0.0);
    return col + mix(vec3(0.0), col, vec3(thresh * blur));
}

vec3 dof(vec2 texCoord_1, float gdepth, mediump sampler2D tex_1, mediump sampler2D gbufferD_1, vec2 texStep, vec2 cameraProj)
{
    vec2 param = cameraProj;
    float depth = linearize(gdepth, param);
    vec2 param_1 = cameraProj;
    float fDepth = linearize((texture2D(gbufferD_1, vec2(0.5, 0.4000000059604644775390625)).x * 2.0) - 1.0, param_1);
    float d = fDepth * 1000.0;
    float o = depth * 1000.0;
    float a = (o * 250.0) / (o - 250.0);
    float b = (d * 250.0) / (d - 250.0);
    float c = (d - 250.0) / ((d * 15.0) * 0.10999999940395355224609375);
    float blur = abs(a - b) * c;
    blur = clamp(blur, 0.0, 1.0);
    vec2 _noise = (rand2(texCoord_1) * 9.9999997473787516355514526367188e-05) * blur;
    float w = ((texStep.x * blur) * 1.0) + _noise.x;
    float h = ((texStep.y * blur) * 1.0) + _noise.y;
    vec3 col = vec3(0.0);
    if (blur < 0.0500000007450580596923828125)
    {
        col = texture2D(tex_1, texCoord_1).xyz;
    }
    else
    {
        col = texture2D(tex_1, texCoord_1).xyz;
        float s = 1.0;
        for (int i = 1; i <= 2; i++)
        {
            int ringsamples = i * 2;
            for (int j = 0; j < ringsamples; j++)
            {
                float _step = 6.283185482025146484375 / float(ringsamples);
                float pw = cos(float(j) * _step) * float(i);
                float ph = sin(float(j) * _step) * float(i);
                float p = 1.0;
                vec2 param_2 = texCoord_1 + vec2(pw * w, ph * h);
                col += ((color(param_2, blur, tex_1, texStep) * mix(1.0, float(i) / 2.0, 0.5)) * p);
                s += ((1.0 * mix(1.0, float(i) / 2.0, 0.5)) * p);
            }
        }
        col /= vec3(s);
    }
    return col;
}

void main()
{
    float depth = texture2D(gbufferD, texCoord).x;
    vec4 col = vec4(dof(texCoord, depth, tex, gbufferD, vec2(0.00999999977648258209228515625), vec2(0.20000000298023223876953125, 0.25)), 1.0);
    gl_FragData[0] = col;
}

